{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":18613,"sourceType":"datasetVersion","datasetId":5839},{"sourceId":2332307,"sourceType":"datasetVersion","datasetId":891819},{"sourceId":2619910,"sourceType":"datasetVersion","datasetId":1592399},{"sourceId":23812,"sourceType":"datasetVersion","datasetId":17810}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import gc \nimport ctypes\nimport random\nfrom tqdm import tqdm\nfrom collections import defaultdict\n\nimport os\nimport sys\nimport pickle\n\nimport numpy as np, pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom glob import glob\nimport cv2\nfrom PIL import Image\n\nimport warnings \nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:16.825239Z","iopub.execute_input":"2024-08-15T00:43:16.825681Z","iopub.status.idle":"2024-08-15T00:43:16.833971Z","shell.execute_reply.started":"2024-08-15T00:43:16.825652Z","shell.execute_reply":"2024-08-15T00:43:16.832553Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/data/Data_Entry_2017.csv')\ndf = df.drop(columns='Unnamed: 11')\nprint(f'Shape of DataFrame: {df.shape}')\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:16.838823Z","iopub.execute_input":"2024-08-15T00:43:16.839347Z","iopub.status.idle":"2024-08-15T00:43:17.145362Z","shell.execute_reply.started":"2024-08-15T00:43:16.839305Z","shell.execute_reply":"2024-08-15T00:43:17.144088Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Shape of DataFrame: (112120, 11)\n","output_type":"stream"},{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"        Image Index          Finding Labels  Follow-up #  Patient ID  \\\n0  00000001_000.png            Cardiomegaly            0           1   \n1  00000001_001.png  Cardiomegaly|Emphysema            1           1   \n2  00000001_002.png   Cardiomegaly|Effusion            2           1   \n3  00000002_000.png              No Finding            0           2   \n4  00000003_000.png                  Hernia            0           3   \n\n   Patient Age Patient Gender View Position  OriginalImage[Width  Height]  \\\n0           58              M            PA                 2682     2749   \n1           58              M            PA                 2894     2729   \n2           58              M            PA                 2500     2048   \n3           81              M            PA                 2500     2048   \n4           81              F            PA                 2582     2991   \n\n   OriginalImagePixelSpacing[x     y]  \n0                        0.143  0.143  \n1                        0.143  0.143  \n2                        0.168  0.168  \n3                        0.171  0.171  \n4                        0.143  0.143  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Image Index</th>\n      <th>Finding Labels</th>\n      <th>Follow-up #</th>\n      <th>Patient ID</th>\n      <th>Patient Age</th>\n      <th>Patient Gender</th>\n      <th>View Position</th>\n      <th>OriginalImage[Width</th>\n      <th>Height]</th>\n      <th>OriginalImagePixelSpacing[x</th>\n      <th>y]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>00000001_000.png</td>\n      <td>Cardiomegaly</td>\n      <td>0</td>\n      <td>1</td>\n      <td>58</td>\n      <td>M</td>\n      <td>PA</td>\n      <td>2682</td>\n      <td>2749</td>\n      <td>0.143</td>\n      <td>0.143</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>00000001_001.png</td>\n      <td>Cardiomegaly|Emphysema</td>\n      <td>1</td>\n      <td>1</td>\n      <td>58</td>\n      <td>M</td>\n      <td>PA</td>\n      <td>2894</td>\n      <td>2729</td>\n      <td>0.143</td>\n      <td>0.143</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>00000001_002.png</td>\n      <td>Cardiomegaly|Effusion</td>\n      <td>2</td>\n      <td>1</td>\n      <td>58</td>\n      <td>M</td>\n      <td>PA</td>\n      <td>2500</td>\n      <td>2048</td>\n      <td>0.168</td>\n      <td>0.168</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>00000002_000.png</td>\n      <td>No Finding</td>\n      <td>0</td>\n      <td>2</td>\n      <td>81</td>\n      <td>M</td>\n      <td>PA</td>\n      <td>2500</td>\n      <td>2048</td>\n      <td>0.171</td>\n      <td>0.171</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>00000003_000.png</td>\n      <td>Hernia</td>\n      <td>0</td>\n      <td>3</td>\n      <td>81</td>\n      <td>F</td>\n      <td>PA</td>\n      <td>2582</td>\n      <td>2991</td>\n      <td>0.143</td>\n      <td>0.143</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"%%time\ntmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','images', '*.png'))}    \n    \ndf['path'] = df['Image Index'].map(tmp)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:17.147507Z","iopub.execute_input":"2024-08-15T00:43:17.147881Z","iopub.status.idle":"2024-08-15T00:43:17.892574Z","shell.execute_reply.started":"2024-08-15T00:43:17.147850Z","shell.execute_reply":"2024-08-15T00:43:17.891345Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"CPU times: user 683 ms, sys: 25.9 ms, total: 709 ms\nWall time: 738 ms\n","output_type":"stream"}]},{"cell_type":"code","source":"df = df[~df['Finding Labels'].str.contains('\\|')]","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:17.894127Z","iopub.execute_input":"2024-08-15T00:43:17.894545Z","iopub.status.idle":"2024-08-15T00:43:17.972654Z","shell.execute_reply.started":"2024-08-15T00:43:17.894513Z","shell.execute_reply":"2024-08-15T00:43:17.971269Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"df_pneumonia = pd.DataFrame()\ndf_pneumonia['Image Index'] = os.listdir('/kaggle/input/chest-xray-pneumonia/chest_xray/train/PNEUMONIA/')\ndf_pneumonia['Finding Labels'] = 'Pneumonia'\n\ntmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','train','*','*.jpeg'))}        \ndf_pneumonia['path'] = df_pneumonia['Image Index'].map(tmp)\n\ndf = pd.concat([df, df_pneumonia])\ndf = df.reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:17.975778Z","iopub.execute_input":"2024-08-15T00:43:17.976156Z","iopub.status.idle":"2024-08-15T00:43:18.071783Z","shell.execute_reply.started":"2024-08-15T00:43:17.976123Z","shell.execute_reply":"2024-08-15T00:43:18.070750Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"df_tuberculosis = pd.DataFrame()\ndf_tuberculosis['Image Index'] = os.listdir('/kaggle/input/tuberculosis-tb-chest-xray-dataset/TB_Chest_Radiography_Database/Tuberculosis/')\ndf_tuberculosis['Finding Labels'] = 'Tuberculosis'\n\ntmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','*','*.png'))}        \ndf_tuberculosis['path'] = df_tuberculosis['Image Index'].map(tmp)\n\ndf = pd.concat([df, df_tuberculosis])\ndf = df.reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:18.073073Z","iopub.execute_input":"2024-08-15T00:43:18.073422Z","iopub.status.idle":"2024-08-15T00:43:18.859387Z","shell.execute_reply.started":"2024-08-15T00:43:18.073393Z","shell.execute_reply":"2024-08-15T00:43:18.858127Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"train_covid = pd.DataFrame()\ntrain_covid['Image Index'] = os.listdir('/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/train/COVID19/')\ntest_covid = pd.DataFrame()\ntest_covid['Image Index'] = os.listdir('/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/test/COVID19/')\ndf_covid = pd.concat([train_covid, test_covid])\ndf_covid['Finding Labels'] = 'Covid'\n\ntmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','*','*.jpg'))}        \ndf_covid['path'] = df_covid['Image Index'].map(tmp)\n\ndf = pd.concat([df, df_covid])\ndf = df.reset_index(drop=True)\ndf = df[['Image Index','Finding Labels', 'path']]","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:18.860849Z","iopub.execute_input":"2024-08-15T00:43:18.861182Z","iopub.status.idle":"2024-08-15T00:43:19.170118Z","shell.execute_reply.started":"2024-08-15T00:43:18.861149Z","shell.execute_reply":"2024-08-15T00:43:19.168710Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"df_1 = pd.concat([df[df['Finding Labels'] == 'Edema'].sample(500, random_state=42)])\ndf_2 = pd.concat([df[df['Finding Labels'] == 'Tuberculosis'].sample(500, random_state=42)])\ndf_3 = pd.concat([df[df['Finding Labels'] == 'Emphysema'].sample(500, random_state=42)])\ndf_4 = pd.concat([df[df['Finding Labels'] == 'Covid'].sample(500, random_state=42)])\n\ndf = pd.concat([df_1,df_2,df_3,df_4])\ndf = df.reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:19.172355Z","iopub.execute_input":"2024-08-15T00:43:19.172831Z","iopub.status.idle":"2024-08-15T00:43:19.269214Z","shell.execute_reply.started":"2024-08-15T00:43:19.172789Z","shell.execute_reply":"2024-08-15T00:43:19.268131Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(12,6))\n\nsns.countplot(x=df['Finding Labels'])\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:19.270699Z","iopub.execute_input":"2024-08-15T00:43:19.271149Z","iopub.status.idle":"2024-08-15T00:43:19.569398Z","shell.execute_reply.started":"2024-08-15T00:43:19.271106Z","shell.execute_reply":"2024-08-15T00:43:19.568147Z"},"trusted":true},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import shutil","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:43:19.570676Z","iopub.execute_input":"2024-08-15T00:43:19.571016Z","iopub.status.idle":"2024-08-15T00:43:19.576225Z","shell.execute_reply.started":"2024-08-15T00:43:19.570988Z","shell.execute_reply":"2024-08-15T00:43:19.574880Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"for label in df['Finding Labels'].unique():\n    os.makedirs(os.path.join('/kagge/working/', label), exist_ok=True)\n    \n    tmp = df[df['Finding Labels'] == label].reset_index(drop=True)\n    \n    for file in tqdm(tmp['path'].unique()):\n        shutil.copy(file, f'/kaggle/working/{label}')","metadata":{"execution":{"iopub.status.busy":"2024-08-15T00:44:33.554750Z","iopub.execute_input":"2024-08-15T00:44:33.555201Z","iopub.status.idle":"2024-08-15T00:44:58.290646Z","shell.execute_reply.started":"2024-08-15T00:44:33.555152Z","shell.execute_reply":"2024-08-15T00:44:58.288952Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stderr","text":"100%|██████████| 500/500 [00:05<00:00, 86.19it/s]\n100%|██████████| 500/500 [00:03<00:00, 150.48it/s]\n100%|██████████| 500/500 [00:06<00:00, 80.13it/s]\n100%|██████████| 500/500 [00:09<00:00, 53.58it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}