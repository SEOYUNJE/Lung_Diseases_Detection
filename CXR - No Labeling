{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7ab1e095",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:11:54.035777Z",
     "iopub.status.busy": "2024-08-15T03:11:54.035384Z",
     "iopub.status.idle": "2024-08-15T03:11:57.010561Z",
     "shell.execute_reply": "2024-08-15T03:11:57.009422Z"
    },
    "papermill": {
     "duration": 2.985784,
     "end_time": "2024-08-15T03:11:57.013466",
     "exception": false,
     "start_time": "2024-08-15T03:11:54.027682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import gc \n",
    "import ctypes\n",
    "import random\n",
    "from tqdm import tqdm\n",
    "from collections import defaultdict\n",
    "\n",
    "import os\n",
    "import sys\n",
    "import pickle\n",
    "\n",
    "import numpy as np, pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from glob import glob\n",
    "import cv2\n",
    "from PIL import Image\n",
    "\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e796a423",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:11:57.028149Z",
     "iopub.status.busy": "2024-08-15T03:11:57.027566Z",
     "iopub.status.idle": "2024-08-15T03:11:57.442086Z",
     "shell.execute_reply": "2024-08-15T03:11:57.440991Z"
    },
    "papermill": {
     "duration": 0.424412,
     "end_time": "2024-08-15T03:11:57.444545",
     "exception": false,
     "start_time": "2024-08-15T03:11:57.020133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of DataFrame: (112120, 11)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Image Index</th>\n",
       "      <th>Finding Labels</th>\n",
       "      <th>Follow-up #</th>\n",
       "      <th>Patient ID</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Patient Gender</th>\n",
       "      <th>View Position</th>\n",
       "      <th>OriginalImage[Width</th>\n",
       "      <th>Height]</th>\n",
       "      <th>OriginalImagePixelSpacing[x</th>\n",
       "      <th>y]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00000001_000.png</td>\n",
       "      <td>Cardiomegaly</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>M</td>\n",
       "      <td>PA</td>\n",
       "      <td>2682</td>\n",
       "      <td>2749</td>\n",
       "      <td>0.143</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00000001_001.png</td>\n",
       "      <td>Cardiomegaly|Emphysema</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>M</td>\n",
       "      <td>PA</td>\n",
       "      <td>2894</td>\n",
       "      <td>2729</td>\n",
       "      <td>0.143</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00000001_002.png</td>\n",
       "      <td>Cardiomegaly|Effusion</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>M</td>\n",
       "      <td>PA</td>\n",
       "      <td>2500</td>\n",
       "      <td>2048</td>\n",
       "      <td>0.168</td>\n",
       "      <td>0.168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00000002_000.png</td>\n",
       "      <td>No Finding</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>81</td>\n",
       "      <td>M</td>\n",
       "      <td>PA</td>\n",
       "      <td>2500</td>\n",
       "      <td>2048</td>\n",
       "      <td>0.171</td>\n",
       "      <td>0.171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00000003_000.png</td>\n",
       "      <td>Hernia</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>81</td>\n",
       "      <td>F</td>\n",
       "      <td>PA</td>\n",
       "      <td>2582</td>\n",
       "      <td>2991</td>\n",
       "      <td>0.143</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Image Index          Finding Labels  Follow-up #  Patient ID  \\\n",
       "0  00000001_000.png            Cardiomegaly            0           1   \n",
       "1  00000001_001.png  Cardiomegaly|Emphysema            1           1   \n",
       "2  00000001_002.png   Cardiomegaly|Effusion            2           1   \n",
       "3  00000002_000.png              No Finding            0           2   \n",
       "4  00000003_000.png                  Hernia            0           3   \n",
       "\n",
       "   Patient Age Patient Gender View Position  OriginalImage[Width  Height]  \\\n",
       "0           58              M            PA                 2682     2749   \n",
       "1           58              M            PA                 2894     2729   \n",
       "2           58              M            PA                 2500     2048   \n",
       "3           81              M            PA                 2500     2048   \n",
       "4           81              F            PA                 2582     2991   \n",
       "\n",
       "   OriginalImagePixelSpacing[x     y]  \n",
       "0                        0.143  0.143  \n",
       "1                        0.143  0.143  \n",
       "2                        0.168  0.168  \n",
       "3                        0.171  0.171  \n",
       "4                        0.143  0.143  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/data/Data_Entry_2017.csv')\n",
    "df = df.drop(columns='Unnamed: 11')\n",
    "print(f'Shape of DataFrame: {df.shape}')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b1e6749b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:11:57.458615Z",
     "iopub.status.busy": "2024-08-15T03:11:57.458223Z",
     "iopub.status.idle": "2024-08-15T03:12:01.198992Z",
     "shell.execute_reply": "2024-08-15T03:12:01.197589Z"
    },
    "papermill": {
     "duration": 3.750997,
     "end_time": "2024-08-15T03:12:01.201682",
     "exception": false,
     "start_time": "2024-08-15T03:11:57.450685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 685 ms, sys: 144 ms, total: 829 ms\n",
      "Wall time: 3.73 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "tmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','images', '*.png'))}    \n",
    "    \n",
    "df['path'] = df['Image Index'].map(tmp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6ba39dbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:01.216049Z",
     "iopub.status.busy": "2024-08-15T03:12:01.215636Z",
     "iopub.status.idle": "2024-08-15T03:12:01.295200Z",
     "shell.execute_reply": "2024-08-15T03:12:01.294158Z"
    },
    "papermill": {
     "duration": 0.089975,
     "end_time": "2024-08-15T03:12:01.298049",
     "exception": false,
     "start_time": "2024-08-15T03:12:01.208074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df[~df['Finding Labels'].str.contains('\\|')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3ac921a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:01.312310Z",
     "iopub.status.busy": "2024-08-15T03:12:01.311923Z",
     "iopub.status.idle": "2024-08-15T03:12:01.759266Z",
     "shell.execute_reply": "2024-08-15T03:12:01.758132Z"
    },
    "papermill": {
     "duration": 0.457715,
     "end_time": "2024-08-15T03:12:01.762095",
     "exception": false,
     "start_time": "2024-08-15T03:12:01.304380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_pneumonia = pd.DataFrame()\n",
    "df_pneumonia['Image Index'] = os.listdir('/kaggle/input/chest-xray-pneumonia/chest_xray/train/PNEUMONIA/')\n",
    "df_pneumonia['Finding Labels'] = 'Pneumonia'\n",
    "\n",
    "tmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','train','*','*.jpeg'))}        \n",
    "df_pneumonia['path'] = df_pneumonia['Image Index'].map(tmp)\n",
    "\n",
    "df = pd.concat([df, df_pneumonia])\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f6a6bff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:01.776283Z",
     "iopub.status.busy": "2024-08-15T03:12:01.775910Z",
     "iopub.status.idle": "2024-08-15T03:12:03.728210Z",
     "shell.execute_reply": "2024-08-15T03:12:03.726998Z"
    },
    "papermill": {
     "duration": 1.962825,
     "end_time": "2024-08-15T03:12:03.731185",
     "exception": false,
     "start_time": "2024-08-15T03:12:01.768360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_tuberculosis = pd.DataFrame()\n",
    "df_tuberculosis['Image Index'] = os.listdir('/kaggle/input/tuberculosis-tb-chest-xray-dataset/TB_Chest_Radiography_Database/Tuberculosis/')\n",
    "df_tuberculosis['Finding Labels'] = 'Tuberculosis'\n",
    "\n",
    "tmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','*','*.png'))}        \n",
    "df_tuberculosis['path'] = df_tuberculosis['Image Index'].map(tmp)\n",
    "\n",
    "df = pd.concat([df, df_tuberculosis])\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ccba4ad3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:03.745510Z",
     "iopub.status.busy": "2024-08-15T03:12:03.745099Z",
     "iopub.status.idle": "2024-08-15T03:12:04.121782Z",
     "shell.execute_reply": "2024-08-15T03:12:04.120885Z"
    },
    "papermill": {
     "duration": 0.387001,
     "end_time": "2024-08-15T03:12:04.124515",
     "exception": false,
     "start_time": "2024-08-15T03:12:03.737514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_covid = pd.DataFrame()\n",
    "train_covid['Image Index'] = os.listdir('/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/train/COVID19/')\n",
    "test_covid = pd.DataFrame()\n",
    "test_covid['Image Index'] = os.listdir('/kaggle/input/chest-xray-pneumoniacovid19tuberculosis/test/COVID19/')\n",
    "df_covid = pd.concat([train_covid, test_covid])\n",
    "df_covid['Finding Labels'] = 'Covid'\n",
    "\n",
    "tmp = {os.path.basename(x): x for x in glob(os.path.join('/kaggle', 'input', '*','*','*','*.jpg'))}        \n",
    "df_covid['path'] = df_covid['Image Index'].map(tmp)\n",
    "\n",
    "df = pd.concat([df, df_covid])\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5aa10641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:04.138551Z",
     "iopub.status.busy": "2024-08-15T03:12:04.138178Z",
     "iopub.status.idle": "2024-08-15T03:12:04.262422Z",
     "shell.execute_reply": "2024-08-15T03:12:04.261248Z"
    },
    "papermill": {
     "duration": 0.134541,
     "end_time": "2024-08-15T03:12:04.265192",
     "exception": false,
     "start_time": "2024-08-15T03:12:04.130651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_1 = pd.concat([df[df['Finding Labels'] == 'Edema'].sample(500, random_state=42)])\n",
    "df_2 = pd.concat([df[df['Finding Labels'] == 'Tuberculosis'].sample(500, random_state=42)])\n",
    "df_3 = pd.concat([df[df['Finding Labels'] == 'Emphysema'].sample(500, random_state=42)])\n",
    "df_4 = pd.concat([df[df['Finding Labels'] == 'Covid'].sample(500, random_state=42)])\n",
    "df_5 = pd.concat([df[df['Finding Labels'] == 'Pneumonia'].sample(500, random_state=42)])\n",
    "\n",
    "df = pd.concat([df_1,df_2,df_3,df_4, df_5])\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1640b7f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:04.279427Z",
     "iopub.status.busy": "2024-08-15T03:12:04.279025Z",
     "iopub.status.idle": "2024-08-15T03:12:04.625841Z",
     "shell.execute_reply": "2024-08-15T03:12:04.624739Z"
    },
    "papermill": {
     "duration": 0.357005,
     "end_time": "2024-08-15T03:12:04.628430",
     "exception": false,
     "start_time": "2024-08-15T03:12:04.271425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "sns.countplot(x=df['Finding Labels'])\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "01d1c3b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:04.644028Z",
     "iopub.status.busy": "2024-08-15T03:12:04.642995Z",
     "iopub.status.idle": "2024-08-15T03:12:04.648258Z",
     "shell.execute_reply": "2024-08-15T03:12:04.647031Z"
    },
    "papermill": {
     "duration": 0.015432,
     "end_time": "2024-08-15T03:12:04.650560",
     "exception": false,
     "start_time": "2024-08-15T03:12:04.635128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import shutil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4bd6dfd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:04.665550Z",
     "iopub.status.busy": "2024-08-15T03:12:04.665138Z",
     "iopub.status.idle": "2024-08-15T03:12:04.692515Z",
     "shell.execute_reply": "2024-08-15T03:12:04.691286Z"
    },
    "papermill": {
     "duration": 0.038086,
     "end_time": "2024-08-15T03:12:04.695298",
     "exception": false,
     "start_time": "2024-08-15T03:12:04.657212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Image Index</th>\n",
       "      <th>Finding Labels</th>\n",
       "      <th>Follow-up #</th>\n",
       "      <th>Patient ID</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Patient Gender</th>\n",
       "      <th>View Position</th>\n",
       "      <th>OriginalImage[Width</th>\n",
       "      <th>Height]</th>\n",
       "      <th>OriginalImagePixelSpacing[x</th>\n",
       "      <th>y]</th>\n",
       "      <th>path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00026971_005.png</td>\n",
       "      <td>Edema</td>\n",
       "      <td>5.0</td>\n",
       "      <td>26971.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>M</td>\n",
       "      <td>AP</td>\n",
       "      <td>3056.0</td>\n",
       "      <td>2544.0</td>\n",
       "      <td>0.139</td>\n",
       "      <td>0.139</td>\n",
       "      <td>/kaggle/input/data/images_011/images/00026971_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>00027415_012.png</td>\n",
       "      <td>Edema</td>\n",
       "      <td>12.0</td>\n",
       "      <td>27415.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>M</td>\n",
       "      <td>AP</td>\n",
       "      <td>3056.0</td>\n",
       "      <td>2544.0</td>\n",
       "      <td>0.139</td>\n",
       "      <td>0.139</td>\n",
       "      <td>/kaggle/input/data/images_011/images/00027415_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>00023310_005.png</td>\n",
       "      <td>Edema</td>\n",
       "      <td>5.0</td>\n",
       "      <td>23310.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>F</td>\n",
       "      <td>AP</td>\n",
       "      <td>3056.0</td>\n",
       "      <td>2544.0</td>\n",
       "      <td>0.139</td>\n",
       "      <td>0.139</td>\n",
       "      <td>/kaggle/input/data/images_010/images/00023310_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>00011985_005.png</td>\n",
       "      <td>Edema</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11985.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>F</td>\n",
       "      <td>AP</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>0.168</td>\n",
       "      <td>0.168</td>\n",
       "      <td>/kaggle/input/data/images_006/images/00011985_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00018972_049.png</td>\n",
       "      <td>Edema</td>\n",
       "      <td>49.0</td>\n",
       "      <td>18972.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>F</td>\n",
       "      <td>AP</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>2048.0</td>\n",
       "      <td>0.168</td>\n",
       "      <td>0.168</td>\n",
       "      <td>/kaggle/input/data/images_009/images/00018972_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2495</th>\n",
       "      <td>person95_virus_177.jpeg</td>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/kaggle/input/chest-xray-pneumonia/chest_xray/...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2496</th>\n",
       "      <td>00003640_004.png</td>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3640.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>M</td>\n",
       "      <td>PA</td>\n",
       "      <td>2992.0</td>\n",
       "      <td>2991.0</td>\n",
       "      <td>0.143</td>\n",
       "      <td>0.143</td>\n",
       "      <td>/kaggle/input/data/images_002/images/00003640_...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2497</th>\n",
       "      <td>person125_virus_254.jpeg</td>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/kaggle/input/chest-xray-pneumonia/chest_xray/...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2498</th>\n",
       "      <td>person688_virus_1281.jpeg</td>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/kaggle/input/chest-xray-pneumonia/chest_xray/...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2499</th>\n",
       "      <td>person592_bacteria_2434.jpeg</td>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/kaggle/input/chest-xray-pneumonia/chest_xray/...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2500 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Image Index Finding Labels  Follow-up #  Patient ID  \\\n",
       "0                 00026971_005.png          Edema          5.0     26971.0   \n",
       "1                 00027415_012.png          Edema         12.0     27415.0   \n",
       "2                 00023310_005.png          Edema          5.0     23310.0   \n",
       "3                 00011985_005.png          Edema          5.0     11985.0   \n",
       "4                 00018972_049.png          Edema         49.0     18972.0   \n",
       "...                            ...            ...          ...         ...   \n",
       "2495       person95_virus_177.jpeg      Pneumonia          NaN         NaN   \n",
       "2496              00003640_004.png      Pneumonia          4.0      3640.0   \n",
       "2497      person125_virus_254.jpeg      Pneumonia          NaN         NaN   \n",
       "2498     person688_virus_1281.jpeg      Pneumonia          NaN         NaN   \n",
       "2499  person592_bacteria_2434.jpeg      Pneumonia          NaN         NaN   \n",
       "\n",
       "      Patient Age Patient Gender View Position  OriginalImage[Width  Height]  \\\n",
       "0            44.0              M            AP               3056.0   2544.0   \n",
       "1            23.0              M            AP               3056.0   2544.0   \n",
       "2            42.0              F            AP               3056.0   2544.0   \n",
       "3            54.0              F            AP               2500.0   2048.0   \n",
       "4            52.0              F            AP               2500.0   2048.0   \n",
       "...           ...            ...           ...                  ...      ...   \n",
       "2495          NaN            NaN           NaN                  NaN      NaN   \n",
       "2496         45.0              M            PA               2992.0   2991.0   \n",
       "2497          NaN            NaN           NaN                  NaN      NaN   \n",
       "2498          NaN            NaN           NaN                  NaN      NaN   \n",
       "2499          NaN            NaN           NaN                  NaN      NaN   \n",
       "\n",
       "      OriginalImagePixelSpacing[x     y]  \\\n",
       "0                           0.139  0.139   \n",
       "1                           0.139  0.139   \n",
       "2                           0.139  0.139   \n",
       "3                           0.168  0.168   \n",
       "4                           0.168  0.168   \n",
       "...                           ...    ...   \n",
       "2495                          NaN    NaN   \n",
       "2496                        0.143  0.143   \n",
       "2497                          NaN    NaN   \n",
       "2498                          NaN    NaN   \n",
       "2499                          NaN    NaN   \n",
       "\n",
       "                                                   path  \n",
       "0     /kaggle/input/data/images_011/images/00026971_...  \n",
       "1     /kaggle/input/data/images_011/images/00027415_...  \n",
       "2     /kaggle/input/data/images_010/images/00023310_...  \n",
       "3     /kaggle/input/data/images_006/images/00011985_...  \n",
       "4     /kaggle/input/data/images_009/images/00018972_...  \n",
       "...                                                 ...  \n",
       "2495  /kaggle/input/chest-xray-pneumonia/chest_xray/...  \n",
       "2496  /kaggle/input/data/images_002/images/00003640_...  \n",
       "2497  /kaggle/input/chest-xray-pneumonia/chest_xray/...  \n",
       "2498  /kaggle/input/chest-xray-pneumonia/chest_xray/...  \n",
       "2499  /kaggle/input/chest-xray-pneumonia/chest_xray/...  \n",
       "\n",
       "[2500 rows x 12 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60e646ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:04.711354Z",
     "iopub.status.busy": "2024-08-15T03:12:04.710909Z",
     "iopub.status.idle": "2024-08-15T03:12:04.752024Z",
     "shell.execute_reply": "2024-08-15T03:12:04.750853Z"
    },
    "papermill": {
     "duration": 0.052345,
     "end_time": "2024-08-15T03:12:04.754850",
     "exception": false,
     "start_time": "2024-08-15T03:12:04.702505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.to_csv('metadata.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f38b98f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T03:12:04.770965Z",
     "iopub.status.busy": "2024-08-15T03:12:04.770535Z",
     "iopub.status.idle": "2024-08-15T03:12:31.113809Z",
     "shell.execute_reply": "2024-08-15T03:12:31.112462Z"
    },
    "papermill": {
     "duration": 26.354967,
     "end_time": "2024-08-15T03:12:31.117013",
     "exception": false,
     "start_time": "2024-08-15T03:12:04.762046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 500/500 [00:05<00:00, 93.21it/s]\n",
      "100%|██████████| 500/500 [00:03<00:00, 149.07it/s]\n",
      "100%|██████████| 500/500 [00:05<00:00, 89.53it/s]\n",
      "100%|██████████| 500/500 [00:07<00:00, 62.86it/s]\n",
      "100%|██████████| 500/500 [00:04<00:00, 123.62it/s]\n"
     ]
    }
   ],
   "source": [
    "PATH = '/kaggle/working/Bbox/'\n",
    "\n",
    "for label in df['Finding Labels'].unique():\n",
    "    os.makedirs(os.path.join(PATH,label), exist_ok=True)\n",
    "    \n",
    "    tmp = df[df['Finding Labels'] == label].reset_index(drop=True)\n",
    "    \n",
    "    for file in tqdm(tmp['path'].unique()):\n",
    "        shutil.copy(file, os.path.join(PATH,label))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41e6cf96",
   "metadata": {
    "papermill": {
     "duration": 0.030553,
     "end_time": "2024-08-15T03:12:31.177627",
     "exception": false,
     "start_time": "2024-08-15T03:12:31.147074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5839,
     "sourceId": 18613,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 17810,
     "sourceId": 23812,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 891819,
     "sourceId": 2332307,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1592399,
     "sourceId": 2619910,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 41.029462,
   "end_time": "2024-08-15T03:12:31.828799",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-15T03:11:50.799337",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
